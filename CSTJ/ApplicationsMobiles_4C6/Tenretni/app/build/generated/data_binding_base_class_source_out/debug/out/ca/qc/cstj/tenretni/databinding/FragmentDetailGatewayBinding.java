// Generated by view binder compiler. Do not edit!
package ca.qc.cstj.tenretni.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.constraintlayout.widget.Group;
import androidx.constraintlayout.widget.Guideline;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import ca.qc.cstj.tenretni.R;
import com.google.android.material.chip.Chip;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentDetailGatewayBinding implements ViewBinding {
  @NonNull
  private final CardView rootView;

  @NonNull
  public final Button btnGatewayReboot;

  @NonNull
  public final Button btnGatewayUpdate;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final CardView cardView;

  @NonNull
  public final Chip chpGatewayStatus;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   */
  @Nullable
  public final ConstraintLayout ctlGatewayDetail;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   */
  @Nullable
  public final Guideline gdlDetailGatewayUp;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   */
  @Nullable
  public final Guideline gdlGatewayDetailDown;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final Guideline gdlStatsSeparator;

  @NonNull
  public final Group grpGatewayStats;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   */
  @Nullable
  public final ImageView imvGatewayConnectionSignal;

  @NonNull
  public final ImageView imvGatewayDownload;

  @NonNull
  public final ImageView imvGatewayKernel1;

  @NonNull
  public final ImageView imvGatewayKernel2;

  @NonNull
  public final ImageView imvGatewayKernel3;

  @NonNull
  public final ImageView imvGatewayKernel4;

  @NonNull
  public final ImageView imvGatewayKernel5;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final ImageView imvGatewayPing;

  @NonNull
  public final ImageView imvGatewaySignal;

  @NonNull
  public final ImageView imvGatewayUpload;

  @NonNull
  public final View rctGatewayHash1;

  @NonNull
  public final View rctGatewayHash10;

  @NonNull
  public final View rctGatewayHash2;

  @NonNull
  public final View rctGatewayHash3;

  @NonNull
  public final View rctGatewayHash4;

  @NonNull
  public final View rctGatewayHash5;

  @NonNull
  public final View rctGatewayHash6;

  @NonNull
  public final View rctGatewayHash7;

  @NonNull
  public final View rctGatewayHash8;

  @NonNull
  public final View rctGatewayHash9;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   */
  @Nullable
  public final TextView txvGatewayConnectionDownloadValue;

  @NonNull
  public final TextView txvGatewayConnectionIP;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   */
  @Nullable
  public final TextView txvGatewayConnectionPing;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   */
  @Nullable
  public final TextView txvGatewayConnectionSignal;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   */
  @Nullable
  public final TextView txvGatewayConnectionUploadValue;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final TextView txvGatewayDownload;

  @NonNull
  public final TextView txvGatewayHashEnd;

  @NonNull
  public final TextView txvGatewayHashStart;

  @NonNull
  public final TextView txvGatewayKernelRevision;

  @NonNull
  public final TextView txvGatewayMAC;

  @NonNull
  public final TextView txvGatewayPIN;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final TextView txvGatewayPing;

  @NonNull
  public final TextView txvGatewaySSID;

  @NonNull
  public final TextView txvGatewaySerialNumber;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final TextView txvGatewaySignal;

  @NonNull
  public final TextView txvGatewayStats;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final TextView txvGatewayUpload;

  @NonNull
  public final TextView txvGatewayVersion;

  private FragmentDetailGatewayBinding(@NonNull CardView rootView, @NonNull Button btnGatewayReboot,
      @NonNull Button btnGatewayUpdate, @Nullable CardView cardView, @NonNull Chip chpGatewayStatus,
      @Nullable ConstraintLayout ctlGatewayDetail, @Nullable Guideline gdlDetailGatewayUp,
      @Nullable Guideline gdlGatewayDetailDown, @Nullable Guideline gdlStatsSeparator,
      @NonNull Group grpGatewayStats, @Nullable ImageView imvGatewayConnectionSignal,
      @NonNull ImageView imvGatewayDownload, @NonNull ImageView imvGatewayKernel1,
      @NonNull ImageView imvGatewayKernel2, @NonNull ImageView imvGatewayKernel3,
      @NonNull ImageView imvGatewayKernel4, @NonNull ImageView imvGatewayKernel5,
      @Nullable ImageView imvGatewayPing, @NonNull ImageView imvGatewaySignal,
      @NonNull ImageView imvGatewayUpload, @NonNull View rctGatewayHash1,
      @NonNull View rctGatewayHash10, @NonNull View rctGatewayHash2, @NonNull View rctGatewayHash3,
      @NonNull View rctGatewayHash4, @NonNull View rctGatewayHash5, @NonNull View rctGatewayHash6,
      @NonNull View rctGatewayHash7, @NonNull View rctGatewayHash8, @NonNull View rctGatewayHash9,
      @Nullable TextView txvGatewayConnectionDownloadValue,
      @NonNull TextView txvGatewayConnectionIP, @Nullable TextView txvGatewayConnectionPing,
      @Nullable TextView txvGatewayConnectionSignal,
      @Nullable TextView txvGatewayConnectionUploadValue, @Nullable TextView txvGatewayDownload,
      @NonNull TextView txvGatewayHashEnd, @NonNull TextView txvGatewayHashStart,
      @NonNull TextView txvGatewayKernelRevision, @NonNull TextView txvGatewayMAC,
      @NonNull TextView txvGatewayPIN, @Nullable TextView txvGatewayPing,
      @NonNull TextView txvGatewaySSID, @NonNull TextView txvGatewaySerialNumber,
      @Nullable TextView txvGatewaySignal, @NonNull TextView txvGatewayStats,
      @Nullable TextView txvGatewayUpload, @NonNull TextView txvGatewayVersion) {
    this.rootView = rootView;
    this.btnGatewayReboot = btnGatewayReboot;
    this.btnGatewayUpdate = btnGatewayUpdate;
    this.cardView = cardView;
    this.chpGatewayStatus = chpGatewayStatus;
    this.ctlGatewayDetail = ctlGatewayDetail;
    this.gdlDetailGatewayUp = gdlDetailGatewayUp;
    this.gdlGatewayDetailDown = gdlGatewayDetailDown;
    this.gdlStatsSeparator = gdlStatsSeparator;
    this.grpGatewayStats = grpGatewayStats;
    this.imvGatewayConnectionSignal = imvGatewayConnectionSignal;
    this.imvGatewayDownload = imvGatewayDownload;
    this.imvGatewayKernel1 = imvGatewayKernel1;
    this.imvGatewayKernel2 = imvGatewayKernel2;
    this.imvGatewayKernel3 = imvGatewayKernel3;
    this.imvGatewayKernel4 = imvGatewayKernel4;
    this.imvGatewayKernel5 = imvGatewayKernel5;
    this.imvGatewayPing = imvGatewayPing;
    this.imvGatewaySignal = imvGatewaySignal;
    this.imvGatewayUpload = imvGatewayUpload;
    this.rctGatewayHash1 = rctGatewayHash1;
    this.rctGatewayHash10 = rctGatewayHash10;
    this.rctGatewayHash2 = rctGatewayHash2;
    this.rctGatewayHash3 = rctGatewayHash3;
    this.rctGatewayHash4 = rctGatewayHash4;
    this.rctGatewayHash5 = rctGatewayHash5;
    this.rctGatewayHash6 = rctGatewayHash6;
    this.rctGatewayHash7 = rctGatewayHash7;
    this.rctGatewayHash8 = rctGatewayHash8;
    this.rctGatewayHash9 = rctGatewayHash9;
    this.txvGatewayConnectionDownloadValue = txvGatewayConnectionDownloadValue;
    this.txvGatewayConnectionIP = txvGatewayConnectionIP;
    this.txvGatewayConnectionPing = txvGatewayConnectionPing;
    this.txvGatewayConnectionSignal = txvGatewayConnectionSignal;
    this.txvGatewayConnectionUploadValue = txvGatewayConnectionUploadValue;
    this.txvGatewayDownload = txvGatewayDownload;
    this.txvGatewayHashEnd = txvGatewayHashEnd;
    this.txvGatewayHashStart = txvGatewayHashStart;
    this.txvGatewayKernelRevision = txvGatewayKernelRevision;
    this.txvGatewayMAC = txvGatewayMAC;
    this.txvGatewayPIN = txvGatewayPIN;
    this.txvGatewayPing = txvGatewayPing;
    this.txvGatewaySSID = txvGatewaySSID;
    this.txvGatewaySerialNumber = txvGatewaySerialNumber;
    this.txvGatewaySignal = txvGatewaySignal;
    this.txvGatewayStats = txvGatewayStats;
    this.txvGatewayUpload = txvGatewayUpload;
    this.txvGatewayVersion = txvGatewayVersion;
  }

  @Override
  @NonNull
  public CardView getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentDetailGatewayBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentDetailGatewayBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_detail_gateway, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentDetailGatewayBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnGatewayReboot;
      Button btnGatewayReboot = ViewBindings.findChildViewById(rootView, id);
      if (btnGatewayReboot == null) {
        break missingId;
      }

      id = R.id.btnGatewayUpdate;
      Button btnGatewayUpdate = ViewBindings.findChildViewById(rootView, id);
      if (btnGatewayUpdate == null) {
        break missingId;
      }

      id = R.id.cardView;
      CardView cardView = ViewBindings.findChildViewById(rootView, id);

      id = R.id.chpGatewayStatus;
      Chip chpGatewayStatus = ViewBindings.findChildViewById(rootView, id);
      if (chpGatewayStatus == null) {
        break missingId;
      }

      id = R.id.ctlGatewayDetail;
      ConstraintLayout ctlGatewayDetail = ViewBindings.findChildViewById(rootView, id);

      id = R.id.gdlDetailGatewayUp;
      Guideline gdlDetailGatewayUp = ViewBindings.findChildViewById(rootView, id);

      id = R.id.gdlGatewayDetailDown;
      Guideline gdlGatewayDetailDown = ViewBindings.findChildViewById(rootView, id);

      id = R.id.gdlStatsSeparator;
      Guideline gdlStatsSeparator = ViewBindings.findChildViewById(rootView, id);

      id = R.id.grpGatewayStats;
      Group grpGatewayStats = ViewBindings.findChildViewById(rootView, id);
      if (grpGatewayStats == null) {
        break missingId;
      }

      id = R.id.imvGatewayConnectionSignal;
      ImageView imvGatewayConnectionSignal = ViewBindings.findChildViewById(rootView, id);

      id = R.id.imvGatewayDownload;
      ImageView imvGatewayDownload = ViewBindings.findChildViewById(rootView, id);
      if (imvGatewayDownload == null) {
        break missingId;
      }

      id = R.id.imvGatewayKernel1;
      ImageView imvGatewayKernel1 = ViewBindings.findChildViewById(rootView, id);
      if (imvGatewayKernel1 == null) {
        break missingId;
      }

      id = R.id.imvGatewayKernel2;
      ImageView imvGatewayKernel2 = ViewBindings.findChildViewById(rootView, id);
      if (imvGatewayKernel2 == null) {
        break missingId;
      }

      id = R.id.imvGatewayKernel3;
      ImageView imvGatewayKernel3 = ViewBindings.findChildViewById(rootView, id);
      if (imvGatewayKernel3 == null) {
        break missingId;
      }

      id = R.id.imvGatewayKernel4;
      ImageView imvGatewayKernel4 = ViewBindings.findChildViewById(rootView, id);
      if (imvGatewayKernel4 == null) {
        break missingId;
      }

      id = R.id.imvGatewayKernel5;
      ImageView imvGatewayKernel5 = ViewBindings.findChildViewById(rootView, id);
      if (imvGatewayKernel5 == null) {
        break missingId;
      }

      id = R.id.imvGatewayPing;
      ImageView imvGatewayPing = ViewBindings.findChildViewById(rootView, id);

      id = R.id.imvGatewaySignal;
      ImageView imvGatewaySignal = ViewBindings.findChildViewById(rootView, id);
      if (imvGatewaySignal == null) {
        break missingId;
      }

      id = R.id.imvGatewayUpload;
      ImageView imvGatewayUpload = ViewBindings.findChildViewById(rootView, id);
      if (imvGatewayUpload == null) {
        break missingId;
      }

      id = R.id.rctGatewayHash1;
      View rctGatewayHash1 = ViewBindings.findChildViewById(rootView, id);
      if (rctGatewayHash1 == null) {
        break missingId;
      }

      id = R.id.rctGatewayHash10;
      View rctGatewayHash10 = ViewBindings.findChildViewById(rootView, id);
      if (rctGatewayHash10 == null) {
        break missingId;
      }

      id = R.id.rctGatewayHash2;
      View rctGatewayHash2 = ViewBindings.findChildViewById(rootView, id);
      if (rctGatewayHash2 == null) {
        break missingId;
      }

      id = R.id.rctGatewayHash3;
      View rctGatewayHash3 = ViewBindings.findChildViewById(rootView, id);
      if (rctGatewayHash3 == null) {
        break missingId;
      }

      id = R.id.rctGatewayHash4;
      View rctGatewayHash4 = ViewBindings.findChildViewById(rootView, id);
      if (rctGatewayHash4 == null) {
        break missingId;
      }

      id = R.id.rctGatewayHash5;
      View rctGatewayHash5 = ViewBindings.findChildViewById(rootView, id);
      if (rctGatewayHash5 == null) {
        break missingId;
      }

      id = R.id.rctGatewayHash6;
      View rctGatewayHash6 = ViewBindings.findChildViewById(rootView, id);
      if (rctGatewayHash6 == null) {
        break missingId;
      }

      id = R.id.rctGatewayHash7;
      View rctGatewayHash7 = ViewBindings.findChildViewById(rootView, id);
      if (rctGatewayHash7 == null) {
        break missingId;
      }

      id = R.id.rctGatewayHash8;
      View rctGatewayHash8 = ViewBindings.findChildViewById(rootView, id);
      if (rctGatewayHash8 == null) {
        break missingId;
      }

      id = R.id.rctGatewayHash9;
      View rctGatewayHash9 = ViewBindings.findChildViewById(rootView, id);
      if (rctGatewayHash9 == null) {
        break missingId;
      }

      id = R.id.txvGatewayConnectionDownloadValue;
      TextView txvGatewayConnectionDownloadValue = ViewBindings.findChildViewById(rootView, id);

      id = R.id.txvGatewayConnectionIP;
      TextView txvGatewayConnectionIP = ViewBindings.findChildViewById(rootView, id);
      if (txvGatewayConnectionIP == null) {
        break missingId;
      }

      id = R.id.txvGatewayConnectionPing;
      TextView txvGatewayConnectionPing = ViewBindings.findChildViewById(rootView, id);

      id = R.id.txvGatewayConnectionSignal;
      TextView txvGatewayConnectionSignal = ViewBindings.findChildViewById(rootView, id);

      id = R.id.txvGatewayConnectionUploadValue;
      TextView txvGatewayConnectionUploadValue = ViewBindings.findChildViewById(rootView, id);

      id = R.id.txvGatewayDownload;
      TextView txvGatewayDownload = ViewBindings.findChildViewById(rootView, id);

      id = R.id.txvGatewayHashEnd;
      TextView txvGatewayHashEnd = ViewBindings.findChildViewById(rootView, id);
      if (txvGatewayHashEnd == null) {
        break missingId;
      }

      id = R.id.txvGatewayHashStart;
      TextView txvGatewayHashStart = ViewBindings.findChildViewById(rootView, id);
      if (txvGatewayHashStart == null) {
        break missingId;
      }

      id = R.id.txvGatewayKernelRevision;
      TextView txvGatewayKernelRevision = ViewBindings.findChildViewById(rootView, id);
      if (txvGatewayKernelRevision == null) {
        break missingId;
      }

      id = R.id.txvGatewayMAC;
      TextView txvGatewayMAC = ViewBindings.findChildViewById(rootView, id);
      if (txvGatewayMAC == null) {
        break missingId;
      }

      id = R.id.txvGatewayPIN;
      TextView txvGatewayPIN = ViewBindings.findChildViewById(rootView, id);
      if (txvGatewayPIN == null) {
        break missingId;
      }

      id = R.id.txvGatewayPing;
      TextView txvGatewayPing = ViewBindings.findChildViewById(rootView, id);

      id = R.id.txvGatewaySSID;
      TextView txvGatewaySSID = ViewBindings.findChildViewById(rootView, id);
      if (txvGatewaySSID == null) {
        break missingId;
      }

      id = R.id.txvGatewaySerialNumber;
      TextView txvGatewaySerialNumber = ViewBindings.findChildViewById(rootView, id);
      if (txvGatewaySerialNumber == null) {
        break missingId;
      }

      id = R.id.txvGatewaySignal;
      TextView txvGatewaySignal = ViewBindings.findChildViewById(rootView, id);

      id = R.id.txvGatewayStats;
      TextView txvGatewayStats = ViewBindings.findChildViewById(rootView, id);
      if (txvGatewayStats == null) {
        break missingId;
      }

      id = R.id.txvGatewayUpload;
      TextView txvGatewayUpload = ViewBindings.findChildViewById(rootView, id);

      id = R.id.txvGatewayVersion;
      TextView txvGatewayVersion = ViewBindings.findChildViewById(rootView, id);
      if (txvGatewayVersion == null) {
        break missingId;
      }

      return new FragmentDetailGatewayBinding((CardView) rootView, btnGatewayReboot,
          btnGatewayUpdate, cardView, chpGatewayStatus, ctlGatewayDetail, gdlDetailGatewayUp,
          gdlGatewayDetailDown, gdlStatsSeparator, grpGatewayStats, imvGatewayConnectionSignal,
          imvGatewayDownload, imvGatewayKernel1, imvGatewayKernel2, imvGatewayKernel3,
          imvGatewayKernel4, imvGatewayKernel5, imvGatewayPing, imvGatewaySignal, imvGatewayUpload,
          rctGatewayHash1, rctGatewayHash10, rctGatewayHash2, rctGatewayHash3, rctGatewayHash4,
          rctGatewayHash5, rctGatewayHash6, rctGatewayHash7, rctGatewayHash8, rctGatewayHash9,
          txvGatewayConnectionDownloadValue, txvGatewayConnectionIP, txvGatewayConnectionPing,
          txvGatewayConnectionSignal, txvGatewayConnectionUploadValue, txvGatewayDownload,
          txvGatewayHashEnd, txvGatewayHashStart, txvGatewayKernelRevision, txvGatewayMAC,
          txvGatewayPIN, txvGatewayPing, txvGatewaySSID, txvGatewaySerialNumber, txvGatewaySignal,
          txvGatewayStats, txvGatewayUpload, txvGatewayVersion);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
